// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: auth.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import type { Metadata } from "@grpc/grpc-js";

export const protobufPackage = "com.wibusystem.grpc.auth";

export interface ValidateTokenRequest {
  token: string;
  device_id: string;
  session_id: string;
  ip_address: string;
}

export interface ValidateTokenResponse {
  status: number;
  status_code: string;
  message: string;
  data: ValidateTokenResponse_TokenData | undefined;
  error?: ErrorData | undefined;
  metadata: string;
  timestamp: string;
  request_id: string;
}

export interface ValidateTokenResponse_TokenData {
  id: number;
  roles: string[];
  permissions: string[];
  verified_email: boolean;
  verified_phone: boolean;
  device_id: string;
  session_id: string;
}

export interface ErrorData {
  code: string;
  message: string;
}

function createBaseValidateTokenRequest(): ValidateTokenRequest {
  return { token: "", device_id: "", session_id: "", ip_address: "" };
}

export const ValidateTokenRequest: MessageFns<ValidateTokenRequest> = {
  encode(message: ValidateTokenRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token !== "") {
      writer.uint32(10).string(message.token);
    }
    if (message.device_id !== "") {
      writer.uint32(18).string(message.device_id);
    }
    if (message.session_id !== "") {
      writer.uint32(26).string(message.session_id);
    }
    if (message.ip_address !== "") {
      writer.uint32(34).string(message.ip_address);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidateTokenRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidateTokenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.token = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.device_id = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.session_id = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.ip_address = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidateTokenRequest {
    return {
      token: isSet(object.token) ? globalThis.String(object.token) : "",
      device_id: isSet(object.device_id) ? globalThis.String(object.device_id) : "",
      session_id: isSet(object.session_id) ? globalThis.String(object.session_id) : "",
      ip_address: isSet(object.ip_address) ? globalThis.String(object.ip_address) : "",
    };
  },

  toJSON(message: ValidateTokenRequest): unknown {
    const obj: any = {};
    if (message.token !== "") {
      obj.token = message.token;
    }
    if (message.device_id !== "") {
      obj.device_id = message.device_id;
    }
    if (message.session_id !== "") {
      obj.session_id = message.session_id;
    }
    if (message.ip_address !== "") {
      obj.ip_address = message.ip_address;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ValidateTokenRequest>, I>>(base?: I): ValidateTokenRequest {
    return ValidateTokenRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ValidateTokenRequest>, I>>(object: I): ValidateTokenRequest {
    const message = createBaseValidateTokenRequest();
    message.token = object.token ?? "";
    message.device_id = object.device_id ?? "";
    message.session_id = object.session_id ?? "";
    message.ip_address = object.ip_address ?? "";
    return message;
  },
};

function createBaseValidateTokenResponse(): ValidateTokenResponse {
  return {
    status: 0,
    status_code: "",
    message: "",
    data: undefined,
    error: undefined,
    metadata: "",
    timestamp: "",
    request_id: "",
  };
}

export const ValidateTokenResponse: MessageFns<ValidateTokenResponse> = {
  encode(message: ValidateTokenResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== 0) {
      writer.uint32(8).int32(message.status);
    }
    if (message.status_code !== "") {
      writer.uint32(18).string(message.status_code);
    }
    if (message.message !== "") {
      writer.uint32(26).string(message.message);
    }
    if (message.data !== undefined) {
      ValidateTokenResponse_TokenData.encode(message.data, writer.uint32(34).fork()).join();
    }
    if (message.error !== undefined) {
      ErrorData.encode(message.error, writer.uint32(42).fork()).join();
    }
    if (message.metadata !== "") {
      writer.uint32(50).string(message.metadata);
    }
    if (message.timestamp !== "") {
      writer.uint32(58).string(message.timestamp);
    }
    if (message.request_id !== "") {
      writer.uint32(66).string(message.request_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidateTokenResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidateTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.status = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status_code = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.data = ValidateTokenResponse_TokenData.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.error = ErrorData.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.metadata = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.timestamp = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.request_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidateTokenResponse {
    return {
      status: isSet(object.status) ? globalThis.Number(object.status) : 0,
      status_code: isSet(object.status_code) ? globalThis.String(object.status_code) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      data: isSet(object.data) ? ValidateTokenResponse_TokenData.fromJSON(object.data) : undefined,
      error: isSet(object.error) ? ErrorData.fromJSON(object.error) : undefined,
      metadata: isSet(object.metadata) ? globalThis.String(object.metadata) : "",
      timestamp: isSet(object.timestamp) ? globalThis.String(object.timestamp) : "",
      request_id: isSet(object.request_id) ? globalThis.String(object.request_id) : "",
    };
  },

  toJSON(message: ValidateTokenResponse): unknown {
    const obj: any = {};
    if (message.status !== 0) {
      obj.status = Math.round(message.status);
    }
    if (message.status_code !== "") {
      obj.status_code = message.status_code;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.data !== undefined) {
      obj.data = ValidateTokenResponse_TokenData.toJSON(message.data);
    }
    if (message.error !== undefined) {
      obj.error = ErrorData.toJSON(message.error);
    }
    if (message.metadata !== "") {
      obj.metadata = message.metadata;
    }
    if (message.timestamp !== "") {
      obj.timestamp = message.timestamp;
    }
    if (message.request_id !== "") {
      obj.request_id = message.request_id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ValidateTokenResponse>, I>>(base?: I): ValidateTokenResponse {
    return ValidateTokenResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ValidateTokenResponse>, I>>(object: I): ValidateTokenResponse {
    const message = createBaseValidateTokenResponse();
    message.status = object.status ?? 0;
    message.status_code = object.status_code ?? "";
    message.message = object.message ?? "";
    message.data = (object.data !== undefined && object.data !== null)
      ? ValidateTokenResponse_TokenData.fromPartial(object.data)
      : undefined;
    message.error = (object.error !== undefined && object.error !== null)
      ? ErrorData.fromPartial(object.error)
      : undefined;
    message.metadata = object.metadata ?? "";
    message.timestamp = object.timestamp ?? "";
    message.request_id = object.request_id ?? "";
    return message;
  },
};

function createBaseValidateTokenResponse_TokenData(): ValidateTokenResponse_TokenData {
  return {
    id: 0,
    roles: [],
    permissions: [],
    verified_email: false,
    verified_phone: false,
    device_id: "",
    session_id: "",
  };
}

export const ValidateTokenResponse_TokenData: MessageFns<ValidateTokenResponse_TokenData> = {
  encode(message: ValidateTokenResponse_TokenData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    for (const v of message.roles) {
      writer.uint32(18).string(v!);
    }
    for (const v of message.permissions) {
      writer.uint32(26).string(v!);
    }
    if (message.verified_email !== false) {
      writer.uint32(32).bool(message.verified_email);
    }
    if (message.verified_phone !== false) {
      writer.uint32(40).bool(message.verified_phone);
    }
    if (message.device_id !== "") {
      writer.uint32(50).string(message.device_id);
    }
    if (message.session_id !== "") {
      writer.uint32(58).string(message.session_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidateTokenResponse_TokenData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidateTokenResponse_TokenData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.roles.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.permissions.push(reader.string());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.verified_email = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.verified_phone = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.device_id = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.session_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidateTokenResponse_TokenData {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      roles: globalThis.Array.isArray(object?.roles) ? object.roles.map((e: any) => globalThis.String(e)) : [],
      permissions: globalThis.Array.isArray(object?.permissions)
        ? object.permissions.map((e: any) => globalThis.String(e))
        : [],
      verified_email: isSet(object.verified_email) ? globalThis.Boolean(object.verified_email) : false,
      verified_phone: isSet(object.verified_phone) ? globalThis.Boolean(object.verified_phone) : false,
      device_id: isSet(object.device_id) ? globalThis.String(object.device_id) : "",
      session_id: isSet(object.session_id) ? globalThis.String(object.session_id) : "",
    };
  },

  toJSON(message: ValidateTokenResponse_TokenData): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.roles?.length) {
      obj.roles = message.roles;
    }
    if (message.permissions?.length) {
      obj.permissions = message.permissions;
    }
    if (message.verified_email !== false) {
      obj.verified_email = message.verified_email;
    }
    if (message.verified_phone !== false) {
      obj.verified_phone = message.verified_phone;
    }
    if (message.device_id !== "") {
      obj.device_id = message.device_id;
    }
    if (message.session_id !== "") {
      obj.session_id = message.session_id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ValidateTokenResponse_TokenData>, I>>(base?: I): ValidateTokenResponse_TokenData {
    return ValidateTokenResponse_TokenData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ValidateTokenResponse_TokenData>, I>>(
    object: I,
  ): ValidateTokenResponse_TokenData {
    const message = createBaseValidateTokenResponse_TokenData();
    message.id = object.id ?? 0;
    message.roles = object.roles?.map((e) => e) || [];
    message.permissions = object.permissions?.map((e) => e) || [];
    message.verified_email = object.verified_email ?? false;
    message.verified_phone = object.verified_phone ?? false;
    message.device_id = object.device_id ?? "";
    message.session_id = object.session_id ?? "";
    return message;
  },
};

function createBaseErrorData(): ErrorData {
  return { code: "", message: "" };
}

export const ErrorData: MessageFns<ErrorData> = {
  encode(message: ErrorData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== "") {
      writer.uint32(10).string(message.code);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ErrorData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseErrorData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.code = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ErrorData {
    return {
      code: isSet(object.code) ? globalThis.String(object.code) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: ErrorData): unknown {
    const obj: any = {};
    if (message.code !== "") {
      obj.code = message.code;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ErrorData>, I>>(base?: I): ErrorData {
    return ErrorData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ErrorData>, I>>(object: I): ErrorData {
    const message = createBaseErrorData();
    message.code = object.code ?? "";
    message.message = object.message ?? "";
    return message;
  },
};

export interface AuthService {
  validateToken(request: ValidateTokenRequest, metadata?: Metadata): Promise<ValidateTokenResponse>;
}

export const AuthServiceServiceName = "com.wibusystem.grpc.auth.AuthService";
export class AuthServiceClientImpl implements AuthService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || AuthServiceServiceName;
    this.rpc = rpc;
    this.validateToken = this.validateToken.bind(this);
  }
  validateToken(request: ValidateTokenRequest, metadata?: Metadata): Promise<ValidateTokenResponse> {
    const data = ValidateTokenRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "validateToken", data, metadata);
    return promise.then((data) => ValidateTokenResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
